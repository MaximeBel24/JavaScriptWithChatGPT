// Exercice 1 : Ã‰valuations logiques simples
// Testez les rÃ©sultats des expressions suivantes :
// true && false
// true || false
// !true && false
// !false || true

// console.log(true && false);// retourne false : une des conditions est fausse (false)
// console.log(true || false);// retourne true : une des conditions est vrai (true)
// console.log(!true && false);// retourne false: aucune des conditions de sont vrai
// console.log(!false || true);// retourne true : une des conditions est vrai (true)


// Exercice 2 : Utilisation dans des conditions
// DÃ©clarez une variable temperature avec la valeur 25.
// Ã‰crivez un programme qui affiche :
// "TempÃ©rature normale" si la tempÃ©rature est entre 18 et 30 degrÃ©s.
// "TempÃ©rature anormale" sinon.

// Utilisation dâ€™un opÃ©rateur ternaire condition ? valeur_si_true : valeur_si_false

// function temperature(temp){
//     let status = (temp >= 18 && temp <= 30) ? "normale" : "anormale";
//     console.log(`TempÃ©rature ${status} : ${temp}Â°`);
// }

// temperature(25);
// temperature(4);
// temperature(36);
// temperature(18);
// temperature(30);

// Exercice 3 : Ã‰valuation paresseuse
// DÃ©clarez une fonction test() qui affiche "Test Ã©valuÃ©" dans la console.
// Testez les rÃ©sultats des expressions suivantes :
// false && test()
// true || test()
// true && test()

function test() {
    console.log("Test Ã©valuÃ©");
}

console.log(false && test());// retourne false : une des conditions est fausse (false), la fonction ne s'affiche pas car la 1ere condition est false, la 2em condition n'est pas Ã©valuÃ©e
console.log(true || test());// retourne true : une des conditions est vrai (true), la fonction ne s'affiche pas car la 1ere condition est true, la 2em condition n'est pas Ã©valuÃ©e
console.log(true && test());// la premiÃ¨re condition est true, javascript Ã©value donc la 2em condition et affiche le message de la fonction

// Dernier exercice sur les opÃ©rateurs logiques :
// Ã‰noncÃ© : Ã‰valuer l'accÃ¨s Ã  une ressource
// Vous allez crÃ©er une fonction canAccessResource qui dÃ©termine si un utilisateur peut accÃ©der Ã  une ressource en fonction de deux paramÃ¨tresâ€¯:

// isAdmin : Un boolÃ©en qui indique si l'utilisateur est administrateur.
// isLoggedIn : Un boolÃ©en qui indique si l'utilisateur est connectÃ©.
// RÃ¨gles :
// Si l'utilisateur est administrateur (isAdmin === true), il peut accÃ©der Ã  la ressource, qu'il soit connectÃ© ou non.
// Si l'utilisateur n'est pas administrateur, il ne peut accÃ©der Ã  la ressource que s'il est connectÃ© (isLoggedIn === true).

function canAccessResource(isAdmin, isLoggedIn) {
    if (isAdmin || isLoggedIn) {
        return "AccÃ¨s autorisÃ© Ã  la ressource.";
    } else {
        return "AccÃ¨s refusÃ© : vous devez Ãªtre connectÃ© ou administrateur.";
    }
}

console.log(canAccessResource(true, false));  // AccÃ¨s autorisÃ© Ã  la ressource.
console.log(canAccessResource(false, true));  // AccÃ¨s autorisÃ© Ã  la ressource.
console.log(canAccessResource(false, false)); // AccÃ¨s refusÃ© : vous devez Ãªtre connectÃ© ou administrateur.
console.log(canAccessResource(true, true)); 

// Exercice Bonus : VÃ©rification d'identification
// ðŸŽ¯ Objectif :
// CrÃ©ez une fonction canEnterBuilding qui dÃ©termine si une personne peut entrer dans un bÃ¢timent en fonction de plusieurs conditions :
// ðŸ”¹ RÃ¨gles dâ€™accÃ¨s :
// Si la personne est employÃ©e (isEmployee === true), elle peut entrer sans restriction.
// Si la personne nâ€™est pas employÃ©e, elle peut entrer seulement si elle a un badge (hasBadge === true).
// Si la personne nâ€™est ni employÃ©e ni en possession dâ€™un badge, lâ€™accÃ¨s est refusÃ©.

function canEnterBuilding(isEmployee, hasBadge) {
    if(isEmployee || hasBadge){
        if(!isEmployee){
            return "Visiteur avec badge : AccÃ¨s autorisÃ©."
        }
        return "EmployÃ© : AccÃ¨s autorisÃ©."
    } else {
        return "AccÃ¨s refusÃ© : Vous devez Ãªtre employÃ© ou avoir un badge."
    }
}

console.log(canEnterBuilding(true, false));  // "EmployÃ© : AccÃ¨s autorisÃ©."
console.log(canEnterBuilding(false, true));  // "Visiteur avec badge : AccÃ¨s autorisÃ©."
console.log(canEnterBuilding(false, false)); // "AccÃ¨s refusÃ© : Vous devez Ãªtre employÃ© ou avoir un badge."
console.log(canEnterBuilding(true, true));   // "EmployÃ© : AccÃ¨s autorisÃ©."